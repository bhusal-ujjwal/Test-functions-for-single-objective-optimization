# -*- coding: utf-8 -*-
"""MI 5 Test Functions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AmWeBNpQ2uSIPGyhAS3Qrpm8xMDeYURE
"""

# Test functions for single-objective optimization
# Implement at least 5 test functions for single-objective optimization in Mathematica or Python.
# Select test functions that are NOT limited to a certain number of input parameters (fixed dimension size).
# You can find them in the related lectures by prof Senkerik, or you can find them online (e.g., https://www.sfu.ca/~ssurjano/index.html).



# SPHERE FUNCTION
# https://www.sfu.ca/~ssurjano/spheref.html
# x is in <-5.12, 5.12>
# f(x*) = 0, x* = (0, ... ,0)
import numpy as np
def test_sphere(x):
    sum = 0
    for i in x:
        sum += i**2
    return sum


if __name__ == '__main__':
    x = [0,0,0,0,0,0]
    fx = test_sphere(x)
    print(fx)

    x1 = [0,1,2,3]
    fx1 = test_sphere(x1)
    print(fx1)

    # random numbers
    # dimension size (number of parameters) d = 10
    # in a range defined by the test function
    d = 10
    x2 = np.random.default_rng().uniform(low=-5.12, high=5.12, size=d)
    print("x = {x2}".format(x2=x2))
    fx2 = test_sphere(x2)
    print("f = {fx2}".format(fx2=fx2))



# RASTRIGIN FUNCTION
# https://www.sfu.ca/~ssurjano/rastr.html
# x is in <-5.12, 5.12>
# f(x*) = 0, x* = (0, ... ,0)
import numpy as np
def test_rastrigin(x):
    d = len(x)
    sum = 10 * d
    for i in x:
        sum += i**2 - 10 * np.cos(2 * np.pi * i)
    return sum

if __name__ == '__main__':
    # example usage with known minimum at x=[0,0,0,0,0,0]
    x = [0,0,0,0,0,0]
    fx = test_rastrigin(x)
    print(fx)

    # example usage with arbitrary point
    x1 = [0,1,2,3]
    fx1 = test_rastrigin(x1)
    print(fx1)

    # example usage with random point of dimension size 10
    d = 10
    x2 = np.random.default_rng().uniform(low=-5.12, high=5.12, size=d)
    print("x = {x2}".format(x2=x2))
    fx2 = test_rastrigin(x2)
    print("f = {fx2}".format(fx2=fx2))



# ACKLEY FUNCTION
# https://www.sfu.ca/~ssurjano/ackley.html
# x is in <-32.768, 32.768>
# f(x*) = 0, x* = (0, ... ,0)
import numpy as np
def test_ackley(x):
    d = len(x)
    sum1 = 0
    sum2 = 0
    for i in x:
        sum1 += i ** 2
        sum2 += np.cos(2 * np.pi * i)
    term1 = -20 * np.exp(-0.2 * np.sqrt(sum1 / d))
    term2 = -np.exp(sum2 / d)
    return term1 + term2 + 20 + np.exp(1)

if __name__ == '__main__':
    # example usage with known minimum at x=[0,0,0,0,0,0]
    x = [0,0,0,0,0,0]
    fx = test_ackley(x)
    print(fx)

    # example usage with arbitrary point
    x1 = [0,1,2,3]
    fx1 = test_ackley(x1)
    print(fx1)

    # example usage with random point of dimension size 10
    d = 10
    x2 = np.random.default_rng().uniform(low=-32.768, high=32.768, size=d)
    print("x = {x2}".format(x2=x2))
    fx2 = test_ackley(x2)
    print("f = {fx2}".format(fx2=fx2))



# ROSENBROCK FUNCTION
# https://www.sfu.ca/~ssurjano/rosen.html
# x is in <-inf, inf>
# f(x*) = 0, x* = (1, ... ,1)
import numpy as np
def test_rosenbrock(x):
    d = len(x)
    sum = 0
    for i in range(d-1):
        sum += 100 * (x[i+1] - x[i]**2)**2 + (1 - x[i])**2
    return sum

if __name__ == '__main__':
    # example usage with known minimum at x=[1,1,1,1,1,1]
    x = [1,1,1,1,1,1]
    fx = test_rosenbrock(x)
    print(fx)

    # example usage with arbitrary point
    x1 = [2,3,4,5]
    fx1 = test_rosenbrock(x1)
    print(fx1)

    # example usage with random point of dimension size 10
    d = 10
    x2 = np.random.default_rng().standard_normal(d)
    print("x = {x2}".format(x2=x2))
    fx2 = test_rosenbrock(x2)
    print("f = {fx2}".format(fx2=fx2))



# GRIEWANK FUNCTION
# https://www.sfu.ca/~ssurjano/griewank.html
# x is in <-600, 600>
# f(x*) = 0, x* = (0, ... ,0)
import numpy as np
def test_griewank(x):
    d = len(x)
    sum_sq = sum(xi**2 for xi in x)
    prod_cos = np.prod([np.cos(xi / np.sqrt(i+1)) for i, xi in enumerate(x)])
    return 1 + sum_sq / 4000 - prod_cos

if __name__ == '__main__':
    # example usage with known minimum at x=[0,0,0,0,0,0]
    x = [0,0,0,0,0,0]
    fx = test_griewank(x)
    print(fx)

    # example usage with arbitrary point
    x1 = [0,1,2,3]
    fx1 = test_griewank(x1)
    print(fx1)

    # example usage with random point of dimension size 10
    d = 10
    x2 = np.random.default_rng().uniform(low=-600, high=600, size=d)
    print("x = {x2}".format(x2=x2))
    fx2 = test_griewank(x2)
    print("f = {fx2}".format(fx2=fx2))



# STYBLINSKI-TANG FUNCTION
# https://www.sfu.ca/~ssurjano/stybtang.html
# x is in <-5, 5>
# f(x*) = -39.166*d, x* = (-2.903534,...,-2.903534)
import numpy as np
def test_stybtang(x):
    sum = 0
    for i in x:
        sum += i**4 - 16 * i**2 + 5 * i
    return 0.5 * sum

if __name__ == '__main__':
    # example usage with known minimum at x=[-2.903534,...,-2.903534]
    x = [-2.903534]*6
    fx = test_stybtang(x)
    print(fx)

    # example usage with arbitrary point
    x1 = [-1,-1,-1,-1,-1,-1]
    fx1 = test_stybtang(x1)
    print(fx1)

    # example usage with random point of dimension size 10
    d = 10
    x2 = np.random.default_rng().uniform(low=-5, high=5, size=d)
    print("x = {x2}".format(x2=x2))
    fx2 = test_stybtang(x2)
    print("f = {fx2}".format(fx2=fx2))

